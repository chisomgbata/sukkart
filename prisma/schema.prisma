generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id            String          @id @default(cuid())
  status        Status          @default(DRAFT)
  name          String
  stock         Int             @default(1)
  slug          String          @unique
  costPrice     Int
  sellingPrice  Int?            @default(0)
  description   String
  image         String
  featured      Boolean         @default(false)
  category      Category[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  OrderItem     OrderItem[]
  Cart          CartItem[]
  ProductImages ProductImages[]
}

enum Status {
  DRAFT
  PUBLISHED
}

model Category {
  id        String    @id @default(cuid())
  name      String
  image     String    @default("default")
  status    Status    @default(DRAFT)
  slug      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model User {
  id          String        @id @default(cuid())
  firstName   String
  lastName    String
  avatar      String        @default("default")
  email       String        @unique
  password    String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Order       Order[]
  Address     Address[]
  Cart        CartItem[]
  coupons     Coupon[]
  CouponUsage CouponUsage[]
}

model Coupon {
  id              String           @id @default(cuid())
  code            String           @unique
  type            CouponType
  name            String
  maxUses         Int              @default(1)
  value           Int
  status          Status           @default(DRAFT)
  openToAll       Boolean          @default(false)
  openTo          User[]
  CouponUsage     CouponUsage[]
  CouponCondition CouponCondition?
}

model CouponUsage {
  id        String   @id @default(cuid())
  coupon    Coupon   @relation(fields: [couponId], references: [id])
  couponId  String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([couponId, userId])
}

enum CouponType {
  PERCENTAGE
  FIXED
}

model Order {
  id               String      @id @default(cuid())
  status           OrderStatus @default(PLACED)
  items            OrderItem[]
  total            Int
  user             User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  deliveryCost     Int
  paymentUrl       String?
  reference        String      @unique
  verificationCode String
  type             PaymentType @default(ONLINE)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  Address          Address?    @relation(fields: [addressId], references: [id], onDelete: SetNull)
  addressId        String?
}

model OrderItem {
  id        String  @id @default(cuid())
  quantity  Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  price     Int
  Order     Order?  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String?
}

enum OrderStatus {
  PLACED
  PAID
  DISPATCHED
  DELIVERED
  PAYMENT_CANCELLED
}

enum PaymentType {
  CASH_ON_DELIVERY
  ONLINE
}

model Address {
  id          String  @id @default(cuid())
  phoneNumber String
  lodge       String
  area        String
  User        User    @relation(fields: [userId], references: [id])
  userId      String
  Order       Order[]
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, userId])
}

model shortUrl {
  id        String   @id @default(cuid())
  url       String   @unique
  shortUrl  String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CustomRequest {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductImages {
  id        String   @id @default(cuid())
  image     String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, image])
}

model CouponCondition {
  id        String @id @default(cuid())
  coupon    Coupon @relation(fields: [couponId], references: [id])
  couponId  String @unique
  minAmount Int
  maxAmount Int?

  // validity
  startDate DateTime
  endDate   DateTime

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
